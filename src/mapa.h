#ifndef mapa_H
#define mapa_H

#include <iostream>
#include <conio.h>
#include <unistd.h>
#include <string>
#include "utils/inputs.h"
#include "entities/enemies.h"
#include "chest.h"
#include "combat.h"
#include "new.h"
#include "entities/character.h"
#include "Inventory.h"
using namespace std;

#define FIL 28
#define COL 80
#define ANCHO_TERMINAL 80

#define wall 1
#define characters 2
#define zombies 3
#define eskeletons 4
#define chests 5
#define boss 6

int mapa[FIL][COL];
extern character player;
void imprimir_mapa();
void copia_nivel1();
void inicializar_mapa();
void mover_personaje_wasd();

void inicializar_mapa() {
    for (int i = 0; i < FIL; ++i) {
        for (int j = 0; j < COL; ++j) {
            if (i == 0 || i == FIL - 1 || j == 0 || j == COL - 1) {
                mapa[i][j] = 1; 
            } else {
                mapa[i][j] = 0; 
            }
        }
    }
}

void imprimir_mapa() {
    int espacios = (ANCHO_TERMINAL - COL) / 2;
    for (int i = 0; i < FIL; ++i) {
        for (int s = 0; s < espacios; ++s) cout << " ";
        for (int j = 0; j < COL; ++j) {
            switch (mapa[i][j]) {
                case wall: cout << "#"; break;
                case characters: cout << "*"; break;
                case zombies : cout << "Z"; break;
                case eskeletons: cout << "E"; break;
                case chests: cout << "$"; break;
                case boss : cout << "B"; break;
                default: cout << " "; break;
            }
        }
        cout << endl;
    }
}

void copia_nivel1() {
    int nivel1[FIL][COL] = {
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},
{1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},
{1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,1,1,1,1,1,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},
{1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},
{1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},
{1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},
{1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,6,0,0,0,0,0,1,1},
{1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},
{1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},
{1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,5,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},
{1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,3,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,4,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},
{1,2,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},
{1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,5,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},
{1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1},
{1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1},
{1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,4,0,1,1,1,1,1,1},
{1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1},
{1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
{1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,1,1,1,1,1,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1},
{1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
    };
    for (int i = 0; i < FIL; ++i)
        for (int j = 0; j < COL; ++j)
            mapa[i][j] = nivel1[i][j];
}

void mover_personaje_wasd(character &player) {
int px = -1, py = -1;
for (int i = 0; i < FIL; ++i) {
    for (int j = 0; j < COL; ++j) {
        if (mapa[i][j] == 2) {
            px = i;
            py = j;
            break;
            
        }
    }
    if (px != -1) break;
}
    imprimir_mapa();
    while (true) {
        char tecla = _getch();
        int nx = px, ny = py;
        if (tecla == 'w' || tecla == TECLA_ARRIBA) nx--;
        else if (tecla == 's' || tecla == TECLA_ABAJO) nx++;
        else if (tecla == 'a' || tecla == TECLA_IZQUIERDA) ny--;
        else if (tecla == 'd' || tecla == TECLA_DERECHA) ny++;
        else if (tecla == 'q') break; // salir con q
        if (nx >= 0 && nx < FIL && ny >= 0 && ny < COL) {
    int celda = mapa[nx][ny];

    if (celda == 0) {
        // Movimiento libre
        mapa[px][py] = 0;
        px = nx; py = ny;
        mapa[px][py] = characters;

    } else if (celda == zombies) {
        cout << "\n¡Te encontraste con un ZOMBI! \n";
        sleep(1); 
        combatSystem(player, zombie);
        mapa[nx][ny] = 0; // Elimina el zombi
        mapa[px][py] = 0;
        px = nx; py = ny;
        mapa[px][py] = characters; 

    } else if (celda == eskeletons) {
        cout << "\n¡Un ESQUELETO bloquea tu camino! \n";
        sleep(1);
        combatSystem(player, skeleton);
        mapa[nx][ny] = 0; // Elimina el esqueleto
        mapa[px][py] = 0;
        px = nx; py = ny;
        mapa[px][py] = characters;

    } else if (celda == chests) {
        cout << "\n¡Has encontrado un COFRE! \n";
        chest(); // Llama la función del cofre
        addToInventory(chest());
        sleep(2);
        mapa[nx][ny] = 0; // Quita el cofre
        mapa[px][py] = 0;
        px = nx; py = ny;
        mapa[px][py] = characters;

    } else if (celda == boss) {
        cout << "\n¡Te enfrentas al JEFE FINAL! \n";
        combatSystem(player, Spider);
        sleep(2);
        
    }
}

        Sleep(0);
        system ("cls");
        imprimir_mapa();
    }
}


#endif

